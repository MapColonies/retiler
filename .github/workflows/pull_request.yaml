name: pull_request

on: [pull_request]

jobs:
  eslint:
    name: Run eslint
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Run linters
        uses: wearerequired/lint-action@v1
        with:
          github_token: ${{ secrets.github_token }}
          # Enable linters
          eslint: true
          prettier: true
          eslint_extensions: ts

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    container: node:16

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:13
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: 1234
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      minio1:
        image: bitnami/minio:2022
        env:
          MINIO_ROOT_USER: minioadmin1
          MINIO_ROOT_PASSWORD: minioadmin1
          MINIO_API_PORT_NUMBER: '9003'
        options: >-
          --health-cmd "curl -f http://localhost:9003/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      minio2:
        image: bitnami/minio:2022
        env:
          MINIO_ROOT_USER: minioadmin2
          MINIO_ROOT_PASSWORD: minioadmin2
          MINIO_API_PORT_NUMBER: '9004'
        options: >-
          --health-cmd "curl -f http://localhost:9004/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node: [16.x, 18.x]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install pg client
        run: |
          apt-get update && apt-get install -y lsb-release
          sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
          apt-get update
          apt-get install -y postgresql-client

      - name: Create pgcrypto extension
        run: psql -h postgres -d postgres -U postgres -c 'CREATE EXTENSION pgcrypto;'
        env:
          PGPASSWORD: 1234

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - uses: actions/upload-artifact@v2
        with:
          name: Test Reporters
          path: reports/**

  build_image:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: build Docker image
        run: docker build -t test-build:latest .
