name: pull_request

on: [pull_request, workflow_dispatch]
env:
  DB_HOST: localhost
  DB_PORT: 5432
  DB_NAME: postgres
  DB_USERNAME: postgres
  DB_PASSWORD: postgres
  DB_SCHEMA: public

jobs:
  eslint:
    name: Run TS Project eslint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [20.x, 22.x]

    steps:
      - name: Check out TS Project Git repository
        uses: actions/checkout@v4

      - name: Init nodejs
        uses: ./.github/actions/init-npm
        with:
          node-version: ${{ matrix.node }}

      - name: Run TS Project linters
        uses: wearerequired/lint-action@v2
        with:
          github_token: ${{ secrets.github_token }}
          # Enable linters
          eslint: true
          prettier: true
          eslint_extensions: ts

  tests:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [20.x, 22.x]

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:14
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      minio:
        image: minio/minio:edge-cicd
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out TS Project Git repository
        uses: actions/checkout@v4

      - name: Init nodejs
        uses: ./.github/actions/init-npm

      - name: Install pg client
        run: |
          sudo apt-get update && sudo apt-get install -y lsb-release
          echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list > /dev/null
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /usr/share/keyrings/postgresql-keyring.asc > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/postgresql-keyring.asc] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y postgresql-client
        shell: bash

      - name: Create pgcrypto extension
        run: psql -h $DB_HOST -d $DB_NAME -U $DB_USERNAME -c 'CREATE EXTENSION pgcrypto;'
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}

      - name: Run tests
        run: npm run test

      - uses: actions/upload-artifact@v4
        with:
          name: Test Reporters ${{ matrix.node }}
          path: ./reports/**

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build_image:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: build Docker image
        run: docker build -t test-build:latest .
